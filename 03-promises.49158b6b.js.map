{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,OAAQC,SAASC,cAAc,UAGjCH,EAAKC,OAAOG,iBAAiB,SAQ7B,SAA0BC,GACD,UAApBA,EAAIC,OAAOC,OACZC,EAAYC,OAAOJ,EAAIC,OAAOI,QAGT,WAApBL,EAAIC,OAAOC,OACZI,EAASF,OAAOJ,EAAIC,OAAOI,QAGN,SAApBL,EAAIC,OAAOC,OACZK,EAAWH,OAAOJ,EAAIC,OAAOI,O,IAjBjCV,EAAKC,OAAOG,iBAAiB,UAqB7B,SAAyBC,GACvBA,EAAIQ,iBACDL,GAAY,GAAKG,GAAU,GAAKC,GAAY,EAC7CE,EAAAhB,GAASiB,OAAOC,QAAQ,8DAO5B,SAAsBC,EAAYC,EAAaC,GAC7C,IAAIC,EAAQH,EACRI,EAAI,EACR,KAAOA,GAAKH,GACVI,EAAcD,EAAGD,GAAOG,MAAMb,IAC5BI,EAAAhB,GAASiB,OAAOS,QAAQ,uBAAqBd,EAAIe,eAAmBf,EAAEU,UAAc,IACnFM,OAAOhB,IACRI,EAAAhB,GAASiB,OAAOC,QAAQ,sBAAoBN,EAAEe,eAAmBf,EAAEU,UAAc,IAEnFA,GAASD,EACTE,GAAK,C,CAfLM,CAAanB,EAAWG,EAAQC,E,IAxBpC,IAAIJ,EAAY,EACZG,EAAS,EACTC,EAAW,EA0Cf,SAASU,EAAcG,EAAUL,GAC/B,MAAMQ,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEP,E,MAAUL,IAEpBa,EAAO,C,SAAER,E,MAAUL,GAAQ,GAE5BA,EAAM,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  formEl: document.querySelector('.form'),\n}\n\nrefs.formEl.addEventListener('input', onFormInputValue);\nrefs.formEl.addEventListener('submit', onPromisesStart);\n\nlet delayTime = 0;\nlet amount = 0;\nlet stepTime = 0;\n\n\nfunction onFormInputValue(evt) {\n  if(evt.target.name === 'delay'){\n    delayTime = Number(evt.target.value);\n  }\n\n  if(evt.target.name === 'amount'){\n    amount = Number(evt.target.value);\n  }\n\n  if(evt.target.name === 'step'){\n    stepTime = Number(evt.target.value);\n  }\n};\n\nfunction onPromisesStart(evt) {\n  evt.preventDefault()\n  if(delayTime <=0 || amount <= 0 || stepTime <= 0){\n    Notiflix.Notify.failure('First delay, Delay step and Amount must be greater than 0!');\n  } else {\n    makePromises(delayTime, amount, stepTime)\n  }\n};\n\n\nfunction makePromises(delayValue, amountValue, stepValue) {\n  let delay = delayValue;\n  let i = 1;\n  while (i <= amountValue) {\n    createPromise(i, delay).then((value) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${value.position} in ${value.delay}ms`);\n    }).catch((value) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${value.position} in ${value.delay}ms`);\n    });\n    delay += stepValue;\n    i += 1;\n  }\n}\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => { \n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay })\n      } else {\n        reject({ position, delay })\n      }\n    }, delay);\n  });\n}"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","formEl","document","querySelector","addEventListener","evt","target","name","$47d4ff9957288465$var$delayTime","Number","value","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$stepTime","preventDefault","$parcel$interopDefault","Notify","failure","delayValue","amountValue","stepValue","delay","i","$47d4ff9957288465$var$createPromise","then","success","position","catch","$47d4ff9957288465$var$makePromises","shouldResolve","Math","random","Promise","resolve","reject","setTimeout"],"version":3,"file":"03-promises.49158b6b.js.map"}